{"code":"import { ManiterConfig } from '../types/index';\nimport { createHistoryEvent } from '../utils/pv';\nlet eventList = ['click', 'dblclick', 'contextmenu', 'mousedown', 'mouseup', 'mouseenter', 'mouseout', 'mouseover'];\nexport default class Maniter {\n    constructor(options) {\n        this.data = Object.assign(this.initDef(), options);\n        this.installManiter();\n    }\n    initDef() {\n        window.history['pushState'] = createHistoryEvent('pushState');\n        window.history['replaceState'] = createHistoryEvent('replaceState');\n        return {\n            sdkVersion: ManiterConfig.version,\n            historyManiter: false,\n            hashManiter: false,\n            domManiter: false,\n            jsError: false,\n        };\n    }\n    setUserId(uuid) {\n        this.data.uuid = uuid;\n    }\n    setExtra(extra) {\n        this.data.extra = extra;\n    }\n    sendManiter(data) {\n        this.reportManiter(data);\n    }\n    targetKeyReport() {\n        eventList.forEach(ev => {\n            window.addEventListener(ev, (event) => {\n                const target = event.target;\n                const targetKey = target.getAttribute('target-key');\n                if (targetKey) {\n                    this.reportManiter({\n                        event: ev,\n                        targetKey\n                    });\n                }\n            });\n        });\n    }\n    captureEvents(mouseEventList, targetKey, data) {\n        mouseEventList.forEach(eventName => {\n            window.addEventListener(eventName, (event) => {\n                console.log(\"监听到了\");\n                this.reportManiter({\n                    eventName,\n                    targetKey,\n                    data\n                });\n            });\n        });\n    }\n    installManiter() {\n        if (this.data.historyManiter) {\n            this.captureEvents(['popstate', 'pushState', 'replaceState'], 'history');\n        }\n        if (this.data.hashManiter) {\n            this.captureEvents(['hashchange'], 'hash');\n        }\n        if (this.data.domManiter) {\n            this.targetKeyReport();\n        }\n    }\n    reportManiter(data) {\n        const params = Object.assign(this.data, data, { time: new Date().getTime() });\n        let header = {\n            type: 'application/x-www-form-urlencoded',\n        };\n        let blob = new Blob([JSON.stringify(params)], header);\n        navigator.sendBeacon(this.data.requestUrl, blob);\n    }\n}\n","references":["C:/Users/10037/Desktop/maniter/src/types/index.ts","C:/Users/10037/Desktop/maniter/src/utils/pv.ts"]}
